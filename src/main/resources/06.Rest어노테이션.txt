[ Rest API 어노테이션 ]
    1. Rest API : HTTP 통신을 통해 리소스의 생성[C], 읽기[R], 수정[U], 삭제[D]를 수행하는 아키텍처/구조
    2. 종류
        @Controller :
                1. Spring Web MVC 중에서 Controller 역할의 클래스임을 표시
                2. 스프링 컨테이너에(메모리/저장소) 빈(인스턴스/객체) 등록 할 수 있다.  *싱글톤 사용할 필요가 없어졌다.
                3. 모든 HTTP 요청이 맵핑/연결 되는 클래스로 사용할 수 있다.
        @RestController :
            1. @Controller + @ResponseBody 조합된 어노테이션
            2. 주로 REST API 컨트롤에서 사용
            3. 값(리소스 반환) 반환하고 템플릿 반환시에는 사용하지 않는다.
        @GetMapping("URL 정의")
        @PostMapping("URL 정의")
        @PutMapping("URL 정의")
        @DeleteMapping("URL 정의")
                1. HTTP GET/POST/PUT/DELETE method 요청을 자바 메소드와 매핑/연결 하는 어노테이션
                2. HTTP GET URL 정의할 수 있다. @Get/Post/Put/DeleteMapping("URL 정의")
                    -> 자바 메소드를 웹 통신으로 부터 외부로 연결이 가능하다.
                    -> 주의할 점 : 프로젝트 동일한 URL 중복은 불가능하다. 단 HTTP METHOD 가 다를 경우는 가능하다.
        @ResponseBody
            1. HTTP 응답을 객체(Body) 또는 값으로 반환 해주는 어노테이션
                -> Content-Type : 'application/json' 또는 text/plain
            2. 만일 생략시 view(템플릿 : jsp/타임리프/jsx 등등 ) 반환이 기본값으로 적용된다.
                -> Content-Type : 'html/text'
        @RequestMapping("URL 정의")
            1. 메소드 또는 클래스 위에 주입이 가능하다.
            2. 주로 클래스 위에서 사용시 메소드들의 공통 URL 정의할 때 사용한다.
        @RequestParam
            1. HTTP 요청 할 때 쿼리스트링 방식으로 매개변수를 자바의 매개변수로 매핑하는 함수
            2. '쿼리스트링' 방식의 매개변수를 매핑하는 어노테이션
            3. 사용가능한 HTTP 메서드 : @GetMapping, @PostMapping, @PutMapping, @DeleteMapping
        @RequestBody
            1. HTTP 요청할 때 header Body 방식으로 데이터를 자바의 매개변수로 매핑하는 어노테이션
            2. 'HTTP Header Body' 방식의 데이터를 매핑하는 어노테이션
            3. 사용가능한 HTTP 메서드 : @PostMapping, @PutMapping

*Rest API 어노테이션 테스트는 talend api
*Spring 에서는 주로 Body 를  JSON/Dto/Map 로 취급한다.
